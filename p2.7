.TH P2 7 "10 March 2019" "v1.0" "Project Report"
.SH NAME
Project 2: Memory Management & Layering
.SH SYNOPSIS
To build a memory manager that uses a bitmap to keep track of holes and blocks used and use this library through the NDK in a java application.
.SH DESCRIPTION
.B /home/reptilian/MemoryManager/MemoryManager.h
.RS 7
This file declares the memory manager API and all the necessary functions to manage memory allocated and freed.
.RE
.B /home/reptilian/MemoryManager/MemoryManager.cpp
.RS 7
Implements the header file declarations to create an object that will manage memory using a bitmap and linked lists and vectors. The deconstructor will deallocate all dynamically created variables to avoid memory leaks and provide a new opportunity for the object to be reinstantiated.
.RE
.B /home/reptilian/MemoryManager/Makefile
.RS 7
Compiles the memory manager library. It is up to the user to link the static library to the console test file or use it with the NDK.
.RE
.B /P2/app/CMakeLists
.RS 7
This file compiles the java app in Android Studio and searches for the native-calls.cpp and the memory manager library to compile it and link the object file created with the main app source code so the app can effectively use the c++ API of the memory manager.
.RE
.B /P2/app/src/main/cpp/native-calls.cpp
.RS 7
This file is the bridge between the java app and the c++ library that uses the JNI library. The JNI library uses wrapper functions that will interpret C++ code.
.RE
.B /P2/app/src/main/cpp/MemoryManager.cpp
.RS 7
This is a physical copy of the library inside the java app folder
.RE
.B /P2/app/src/main/cpp/MemoryManager.h
.RS 7
Same as the file above.
.RE
.SH TESTING
I had to do a lot of testing to make sure I was not reaching out of bounds on the dynamically allocated arrays. I had to build an additional structure to keep track of only processes allocated to know the size of each time allocate() is used. Running the console test file made me realize I had the endianness backwards. I also had problems with understanding the real size of the bitmap given the console test file because I was using a full byte per word but in the test file 8 words are in one byte. I had a lot of difficulty synchronizing my allocating algorithms because I was confusing the sizes of the offset with the real memory space offset. 
.SH BUGS
When wordSize is zero in the constructor it will default to 2. When wordSize is above 16 it will also default to 16 because 2^16 is 64-bits. A word size greater than 64-bits exceeds the CPUâ€™s bus size. When allocate() has a paremeter of zero it will not allocate anything and return a null pointer. Initialize() is effective once per every shutdown() called. Same goes for shutdown(). It cannot be called twice back to back if the block has not been initialized. I fixed the allocating algorithm offset issues by specifying what list I was using and what size was the offset and to point that it was the offset of the space address.
.SH LINK
https://youtu.be/hoMOsvVfJOQ
.SH REFERENCES/CITATIONS
http://androidkt.com/android-ndk/

http://www.idc-online.com/technical_references/pdfs/information_technology/Memory_Management_with_Bitmaps_and_Linked_List.pdf

https://developer.android.com/ndk/guides/

https://www.ibm.com/developerworks/library/pa-dalign/index.html

https://www.cs.rit.edu/~ark/lectures/gc/03_00_00.html
.SH AUTHOR
Juan Higuera

